// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace main_CarM8.Data
{
    public partial class Carm8DataContext : DbContext
    {
        public Carm8DataContext()
        {
        }

        public Carm8DataContext(DbContextOptions<Carm8DataContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Accounts> Accounts { get; set; }
        public virtual DbSet<Profiles> Profiles { get; set; }
        public virtual DbSet<Vehicles> Vehicles { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Accounts>(entity =>
            {
                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.DateCreated).HasColumnType("smalldatetime");

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<Profiles>(entity =>
            {
                entity.HasKey(e => e.ProfileId);

                entity.Property(e => e.ProfileId)
                    .HasColumnName("ProfileID")
                    .ValueGeneratedNever();

                entity.Property(e => e.DateUpdated).HasColumnType("smalldatetime");

                entity.Property(e => e.Location)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.ProfileName)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Vehicle)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.HasOne(d => d.Profile)
                    .WithOne(p => p.Profiles)
                    .HasForeignKey<Profiles>(d => d.ProfileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Profiles_Accounts");
            });

            modelBuilder.Entity<Vehicles>(entity =>
            {
                entity.HasKey(e => e.VehicleId);

                entity.Property(e => e.VehicleId)
                    .HasColumnName("VehicleID")
                    .ValueGeneratedNever();

                entity.Property(e => e.Color)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Engine)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.FuelCapacity)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Make)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Model)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.OwnerId).HasColumnName("OwnerID");

                entity.Property(e => e.VehicleType)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Year)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.HasOne(d => d.Vehicle)
                    .WithOne(p => p.Vehicles)
                    .HasForeignKey<Vehicles>(d => d.VehicleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Profiles_Vehicles");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}